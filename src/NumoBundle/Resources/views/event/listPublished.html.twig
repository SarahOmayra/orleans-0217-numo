{% extends 'layout.html.twig' %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('css/eventstyle.css') }}">
    <link rel="stylesheet" href="{{ asset('css/fullcalendar.min.css') }}">
{% endblock %}


{% block body %}
    <div class="container-fluid">
        {# --- Titre de la page --- #}
        <div class="row">
            <div class="col-xs-12 text-center">
                <h1 class="title-view">Agenda</h1>
                {# --- bouton "créer nouvel évènement --- #}
                {% if is_granted('IS_AUTHENTICATED_FULLY') %}
                    <p><a href="{{ path('event_new') }}" class="btn btn-default btn-txt" role="button">
                            Créer un nouvel évènement
                    </a></p>
                {% endif %}
                <div class="separation barrePurple"></div>
            </div>
        </div>

        {# barre de sélecteurs --- #}
        <div class="row">

            <div class="col-xs-12 text-center">

                {{ form_start(selectForm, {'attr': {'class': 'form-inline'}}) }}
                    {{ form_label(selectForm.startDate, 'Période du', {'label_attr': {'class': 'in-line'}}) }}
                    {{ form_widget(selectForm.startDate, {'attr': {'class': 'in-line date-field', 'placeholder': 'jj/mm/aaaa'}}) }}

                    {{ form_label(selectForm.endDate, 'au', {'label_attr': {'class': 'in-line'}}) }}
                    {{ form_widget(selectForm.endDate, {'attr': {'class': 'in-line date-field', 'placeholder': 'jj/mm/aaaa'}}) }}

                    {{ form_label(selectForm.category, 'Catégorie : ', {'label_attr': {'class': 'in-line'}}) }}
                    {{ form_widget(selectForm.category, {'attr': {'class': 'in-line tagfield'}}) }}

                    <button  class="btn btn-default btnviolet" id="submitForm" type="submit" name="select">APPLIQUER</button>
                    <a href="{{ path('event_list_published') }}" class="btn btn-default btnviolet" role="button">EFFACER</a>


                    <p class="red-error">
                        {{ form_errors(selectForm.startDate)|striptags }}
                        {{ form_errors(selectForm.endDate)|striptags }}
                    </p>

                {{ form_end(selectForm) }}

                <div class="separation barrePurple"></div>
            </div>
        </div>

        {# --- contenu de page --- #}

        <div class="row">
            {% if error %}

                <div class="col-xs-12 text-center">
                    <p><img src="{{ asset('img/erreur.png') }}" /></p>
                    <h3>La liste n'a pas pu être lue.</h3>
                    <p><a href="{{ path('event_list_published') }}" class="btn btn-default btn-txt" role="button">Recharger la page</a></p>
                </div>

            {% else %}

                <div class="col-xs-12 col-md-7 col-lg-5 col-lg-offset-2 text-center textA">

                    {% if events|length == 0 %}
                        <div class="empty-list text-center">
                            Cette liste est vide
                        </div>
                    {% else %}
                        {% for event in pages %}
                            <a href="{{ path('event_show_published', {'id': event.id}) }}">
                                <div class="row event-zone">
                                    <div class="col-xs-4">
                                            <div class="event-img">
                                                {% if event.image is not empty %}
                                                    <img src="{{ event.image }}" alt="image {{ event.title }}" class="img-responsive center-block" />
                                                {% else %}
                                                    <img src="{{ asset('img/event_placeholder.png') }}" alt="image {{ event.title }}" class="img-responsive center-block" />
                                                {% endif %}
                                            </div>
                                    </div>
                                    <div class="col-xs-8 text-left">
                                        <h3 class="event-title">{{ event.title }}</h3>
                                        <p>
                                            {% if event.newDates|length == 0 %}
                                                Cet évènement est passé.
                                            {% else %}
                                                {{ event.newDates[0].evtDate|localizeddate("medium", "none", null, null, "cccc d LLLL yyyy") }}
                                            {% endif %}
                                        </p>
                                        <h4>{{ event.description }}</h4>
                                        <p>{{ event.freeText|slice(0, 200) ~ '...' }}</p>
                                    </div>
                                </div>
                            </a>
                        {% endfor %}
                    {% endif %}
                </div>

                <div class="col-xs-12 col-md-5 col-lg-3">
                    <div id="closemap1" class="text-center" onclick="closeMap1();">X</div>
                    <div id="map"></div>
                        <div id="calendar"></div>
                </div>

            {% endif %}

        </div>

        <div class="navigation text-center">
            {{ knp_pagination_render(pages) }}
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="{{ asset('js/showevent.js') }}"></script>
    <script src="{{ asset('js/fullcalendar.min.js') }}"></script>
    <script>
        function initMap() {
            // --- calcul du centrage de la map
            var minLatitude = 1000.0; var maxLatitude = 0.0; var centerLatitude = 0.0;
            var minLongitude = 1000.0; var maxLongitude = 0.0; var centerLongitude = 0.0;
            {% for event in events %}
            minLatitude = Math.min(minLatitude, parseFloat({{ event.latitude }}));
            maxLatitude = Math.max(maxLatitude, parseFloat({{ event.latitude }}));
            minLongitude = Math.min(minLongitude, parseFloat({{ event.longitude }}));
            maxLongitude = Math.max(maxLongitude, parseFloat({{ event.longitude }}));
            {% endfor %}
            centerLatitude = (minLatitude + maxLatitude)/2;
            centerLongitude = (minLongitude + maxLongitude)/2;
            var centerMap = new google.maps.LatLng(centerLatitude.toFixed(6), centerLongitude.toFixed(6));
            // --- creation de la map
            var map = new google.maps.Map(document.getElementById('map'), {
                zoom: 10, // arbitraire
                center: centerMap
            });
            // --- positionnement des points sur la map
            {% for event in events %}
            var myLatLng = {lat: {{ event.latitude }}, lng: {{ event.longitude }} };
            var marker = new google.maps.Marker({
                position: myLatLng,
                map: map,
                title: '{{ event.title }}!'
            });
            {% endfor %}
        }

        var $calendar = $("#calendar");
        $calendar.fullCalendar({
            header: {
                left: ' today,prev,next,  title',
                right: ' '
            },
            weeKends: true,
            allDayslot: true,
            droppable: true,
            eventAfterAllRender: function (view) {
                var header = $calendar.find(".fc-header");
                // trigger current view
                header.find('.fc-header-right').find('.fc-button').off('mouseup').on('mouseup', function () {
                    if (!$(this).hasClass('fc-button-agendaView')) {
                        $calendar.data("view", '');
                    }
                });
                if ($calendar.data("view") != 'agendaView') {
                    header.find(".fc-button-agendaView").removeClass('fc-state-active active');
                    $("#agendaView").remove();
                } else {
                    renderAgendaView();
                }
            },
            eventRender: function (event, e) {
                currentView = $('#calendar').fullCalendar('getView').name;
            }, dayClick: function (date, jsEvent, view) {
            },
            eventClick: function (calEvent, jsEvent, view) {
                console.log("");
                console.log(calEvent);
            }
        });
        var headerRight = $calendar.find(".fc-header").find(".fc-header-right");
        var agendaBtn = headerRight.find(".fc-corner-right").removeClass('fc-corner-right')
            .clone().addClass('fc-corner-right fc-button-agendaView').removeClass('fc-button-agendaDay').text("agenda");
        agendaBtn.on('click', function () {
            renderAgendaView();
        });
        headerRight.find(".fc-header-space").before(agendaBtn);
        // test event data
        {% for date in dates %}
        year = {{ date.2 }};
        month = {{ date.1 }};
        day = {{ date.0 }};
        var newEvent = {
            title: `${day}/${month}/${year}`,
            start: new Date({{ date.2 }}, {{ date.1 }}-1, {{ date.0 }}),
            end: new Date({{ date.2 }}, {{ date.1 }}-1, {{ date.0 }}),
            editable: true
        };
        // add event to calendar
        var event = $('#calendar').fullCalendar('renderEvent', newEvent, 'stick');
        {% endfor %}
        function renderAgendaView() {
            if ($calendar.fullCalendar('getView') != 'agendaView') {
                $calendar.fullCalendar('changeView', 'month');
                var newView = $calendar.fullCalendar('getView');
                newView.name = 'agendaView';
                $calendar.fullCalendar('changeView', 'agendaView');
            }
        }
            $('.fc-event-inner').on('click', function(e) {
                dateval = $(this).children('.fc-event-title').text();
                $('#numobundle_select_event_startDate').val(dateval);
                $('#numobundle_select_event_endDate').val(dateval);
                $("form").submit();

            });
    </script>

    <script src="https://maps.googleapis.com/maps/api/js?key={{ googleMapApi }}=initMap"
            async defer></script>

{% endblock %}